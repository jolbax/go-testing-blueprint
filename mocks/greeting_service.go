// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	model "go-testing-blueprint/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// GreetingService is an autogenerated mock type for the GreetingService type
type GreetingService struct {
	mock.Mock
}

// GetGreeting provides a mock function with given fields: name
func (_m *GreetingService) GetGreeting(name string) model.Greeting {
	ret := _m.Called(name)

	var r0 model.Greeting
	if rf, ok := ret.Get(0).(func(string) model.Greeting); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(model.Greeting)
	}

	return r0
}

// PostGreeting provides a mock function with given fields: _a0
func (_m *GreetingService) PostGreeting(_a0 model.Greeting) model.Greeting {
	ret := _m.Called(_a0)

	var r0 model.Greeting
	if rf, ok := ret.Get(0).(func(model.Greeting) model.Greeting); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Greeting)
	}

	return r0
}

type mockConstructorTestingTNewGreetingService interface {
	mock.TestingT
	Cleanup(func())
}

// NewGreetingService creates a new instance of GreetingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGreetingService(t mockConstructorTestingTNewGreetingService) *GreetingService {
	mock := &GreetingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
